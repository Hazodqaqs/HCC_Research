// Generated by gencpp from file galileo_serial_server/GalileoStatus.msg
// DO NOT EDIT!


#ifndef GALILEO_SERIAL_SERVER_MESSAGE_GALILEOSTATUS_H
#define GALILEO_SERIAL_SERVER_MESSAGE_GALILEOSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace galileo_serial_server
{
template <class ContainerAllocator>
struct GalileoStatus_
{
  typedef GalileoStatus_<ContainerAllocator> Type;

  GalileoStatus_()
    : header()
    , navStatus(0)
    , visualStatus(0)
    , mapStatus(0)
    , gcStatus(0)
    , gbaStatus(0)
    , chargeStatus(0)
    , loopStatus(0)
    , power(0.0)
    , targetNumID(0)
    , targetStatus(0)
    , targetDistance(0.0)
    , angleGoalStatus(0)
    , controlSpeedX(0.0)
    , controlSpeedTheta(0.0)
    , currentSpeedX(0.0)
    , currentSpeedTheta(0.0)
    , currentPosX(0.0)
    , currentPosY(0.0)
    , currentAngle(0.0)
    , busyStatus(0)  {
    }
  GalileoStatus_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , navStatus(0)
    , visualStatus(0)
    , mapStatus(0)
    , gcStatus(0)
    , gbaStatus(0)
    , chargeStatus(0)
    , loopStatus(0)
    , power(0.0)
    , targetNumID(0)
    , targetStatus(0)
    , targetDistance(0.0)
    , angleGoalStatus(0)
    , controlSpeedX(0.0)
    , controlSpeedTheta(0.0)
    , currentSpeedX(0.0)
    , currentSpeedTheta(0.0)
    , currentPosX(0.0)
    , currentPosY(0.0)
    , currentAngle(0.0)
    , busyStatus(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int32_t _navStatus_type;
  _navStatus_type navStatus;

   typedef int32_t _visualStatus_type;
  _visualStatus_type visualStatus;

   typedef int32_t _mapStatus_type;
  _mapStatus_type mapStatus;

   typedef int32_t _gcStatus_type;
  _gcStatus_type gcStatus;

   typedef int32_t _gbaStatus_type;
  _gbaStatus_type gbaStatus;

   typedef int32_t _chargeStatus_type;
  _chargeStatus_type chargeStatus;

   typedef int32_t _loopStatus_type;
  _loopStatus_type loopStatus;

   typedef float _power_type;
  _power_type power;

   typedef int32_t _targetNumID_type;
  _targetNumID_type targetNumID;

   typedef int32_t _targetStatus_type;
  _targetStatus_type targetStatus;

   typedef float _targetDistance_type;
  _targetDistance_type targetDistance;

   typedef int32_t _angleGoalStatus_type;
  _angleGoalStatus_type angleGoalStatus;

   typedef float _controlSpeedX_type;
  _controlSpeedX_type controlSpeedX;

   typedef float _controlSpeedTheta_type;
  _controlSpeedTheta_type controlSpeedTheta;

   typedef float _currentSpeedX_type;
  _currentSpeedX_type currentSpeedX;

   typedef float _currentSpeedTheta_type;
  _currentSpeedTheta_type currentSpeedTheta;

   typedef float _currentPosX_type;
  _currentPosX_type currentPosX;

   typedef float _currentPosY_type;
  _currentPosY_type currentPosY;

   typedef float _currentAngle_type;
  _currentAngle_type currentAngle;

   typedef int32_t _busyStatus_type;
  _busyStatus_type busyStatus;





  typedef boost::shared_ptr< ::galileo_serial_server::GalileoStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::galileo_serial_server::GalileoStatus_<ContainerAllocator> const> ConstPtr;

}; // struct GalileoStatus_

typedef ::galileo_serial_server::GalileoStatus_<std::allocator<void> > GalileoStatus;

typedef boost::shared_ptr< ::galileo_serial_server::GalileoStatus > GalileoStatusPtr;
typedef boost::shared_ptr< ::galileo_serial_server::GalileoStatus const> GalileoStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::galileo_serial_server::GalileoStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::galileo_serial_server::GalileoStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace galileo_serial_server

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'galileo_serial_server': ['/home/xiaoqiang/Documents/ros/src/galileo_serial_server/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::galileo_serial_server::GalileoStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::galileo_serial_server::GalileoStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::galileo_serial_server::GalileoStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::galileo_serial_server::GalileoStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::galileo_serial_server::GalileoStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::galileo_serial_server::GalileoStatus_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::galileo_serial_server::GalileoStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8d2f7d4991adf5a4d6100ff07965ddb8";
  }

  static const char* value(const ::galileo_serial_server::GalileoStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8d2f7d4991adf5a4ULL;
  static const uint64_t static_value2 = 0xd6100ff07965ddb8ULL;
};

template<class ContainerAllocator>
struct DataType< ::galileo_serial_server::GalileoStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "galileo_serial_server/GalileoStatus";
  }

  static const char* value(const ::galileo_serial_server::GalileoStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::galileo_serial_server::GalileoStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n\
int32 navStatus\n\
int32 visualStatus\n\
int32 mapStatus\n\
int32 gcStatus\n\
int32 gbaStatus\n\
int32 chargeStatus\n\
int32 loopStatus\n\
float32 power\n\
int32 targetNumID\n\
int32 targetStatus\n\
float32 targetDistance\n\
int32 angleGoalStatus\n\
float32 controlSpeedX\n\
float32 controlSpeedTheta\n\
float32 currentSpeedX\n\
float32 currentSpeedTheta\n\
float32 currentPosX\n\
float32 currentPosY\n\
float32 currentAngle\n\
int32 busyStatus\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::galileo_serial_server::GalileoStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::galileo_serial_server::GalileoStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.navStatus);
      stream.next(m.visualStatus);
      stream.next(m.mapStatus);
      stream.next(m.gcStatus);
      stream.next(m.gbaStatus);
      stream.next(m.chargeStatus);
      stream.next(m.loopStatus);
      stream.next(m.power);
      stream.next(m.targetNumID);
      stream.next(m.targetStatus);
      stream.next(m.targetDistance);
      stream.next(m.angleGoalStatus);
      stream.next(m.controlSpeedX);
      stream.next(m.controlSpeedTheta);
      stream.next(m.currentSpeedX);
      stream.next(m.currentSpeedTheta);
      stream.next(m.currentPosX);
      stream.next(m.currentPosY);
      stream.next(m.currentAngle);
      stream.next(m.busyStatus);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GalileoStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::galileo_serial_server::GalileoStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::galileo_serial_server::GalileoStatus_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "navStatus: ";
    Printer<int32_t>::stream(s, indent + "  ", v.navStatus);
    s << indent << "visualStatus: ";
    Printer<int32_t>::stream(s, indent + "  ", v.visualStatus);
    s << indent << "mapStatus: ";
    Printer<int32_t>::stream(s, indent + "  ", v.mapStatus);
    s << indent << "gcStatus: ";
    Printer<int32_t>::stream(s, indent + "  ", v.gcStatus);
    s << indent << "gbaStatus: ";
    Printer<int32_t>::stream(s, indent + "  ", v.gbaStatus);
    s << indent << "chargeStatus: ";
    Printer<int32_t>::stream(s, indent + "  ", v.chargeStatus);
    s << indent << "loopStatus: ";
    Printer<int32_t>::stream(s, indent + "  ", v.loopStatus);
    s << indent << "power: ";
    Printer<float>::stream(s, indent + "  ", v.power);
    s << indent << "targetNumID: ";
    Printer<int32_t>::stream(s, indent + "  ", v.targetNumID);
    s << indent << "targetStatus: ";
    Printer<int32_t>::stream(s, indent + "  ", v.targetStatus);
    s << indent << "targetDistance: ";
    Printer<float>::stream(s, indent + "  ", v.targetDistance);
    s << indent << "angleGoalStatus: ";
    Printer<int32_t>::stream(s, indent + "  ", v.angleGoalStatus);
    s << indent << "controlSpeedX: ";
    Printer<float>::stream(s, indent + "  ", v.controlSpeedX);
    s << indent << "controlSpeedTheta: ";
    Printer<float>::stream(s, indent + "  ", v.controlSpeedTheta);
    s << indent << "currentSpeedX: ";
    Printer<float>::stream(s, indent + "  ", v.currentSpeedX);
    s << indent << "currentSpeedTheta: ";
    Printer<float>::stream(s, indent + "  ", v.currentSpeedTheta);
    s << indent << "currentPosX: ";
    Printer<float>::stream(s, indent + "  ", v.currentPosX);
    s << indent << "currentPosY: ";
    Printer<float>::stream(s, indent + "  ", v.currentPosY);
    s << indent << "currentAngle: ";
    Printer<float>::stream(s, indent + "  ", v.currentAngle);
    s << indent << "busyStatus: ";
    Printer<int32_t>::stream(s, indent + "  ", v.busyStatus);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GALILEO_SERIAL_SERVER_MESSAGE_GALILEOSTATUS_H
